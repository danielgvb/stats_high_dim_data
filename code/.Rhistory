train_data_scaled <- train_data
train_data_scaled[vars_to_scale_names] <- sweep(train_data[vars_to_scale_names], 2, mean_train, "-")
train_data_scaled[vars_to_scale_names] <- sweep(train_data_scaled[vars_to_scale_names], 2, sd_train, "/")
# Scale the test set
test_data_scaled <- test_data
test_data_scaled[vars_to_scale_names] <- sweep(test_data[vars_to_scale_names], 2, mean_train, "-")
test_data_scaled[vars_to_scale_names] <- sweep(test_data_scaled[vars_to_scale_names], 2, sd_train, "/")
# Check scaling Z-score -> mean = 0; sd = 1
summary(train_data_scaled[vars_to_scale_names])
apply(train_data_scaled[vars_to_scale_names], 2, sd)
# Model Training and Evaluation (only on BALANCED data) ------------------------
## Oversampling of minority class --------------
# Check how much unbalanced the data are
table(train_data_scaled$default_90)
train_data_balanced <- ovun.sample(default_90 ~ ., data = train_data_scaled, method = "over")$data
table(train_data_balanced$default_90)
## Logistic Regression (Balanced Training Data) ----------------
logistic_model_balanced <- glm(default_90 ~ ., data = train_data_balanced, family = binomial)
summary(logistic_model_balanced)
### Post-Estimation Plots---------------
par(mfrow = c(2,2))
plot(logistic_model_balanced)
#### 1. ROC Curve and AUC ------------------------------------
par(mfrow = c(1,1))
# Predicted probabilities
predicted_prob_balanced <- predict(logistic_model_balanced, newdata = test_data_scaled, type = "response")
# ROC and AUC
roc_curve_balanced <- roc(test_data_scaled$default_90, predicted_prob_balanced)
auc_value_balanced <- auc(roc_curve_balanced)
# Plot ROC Curve
plot(roc_curve_balanced, col = "blue", main = paste("ROC Curve (AUC =", round(auc_value_balanced, 2), ")"))
abline(a = 0, b = 1, lty = 2, col = "gray")
# Predicted classes
predicted_class_balanced <- ifelse(predicted_prob_balanced > 0.5, 1, 0)
# Confusion matrix
conf_matrix_balanced <- table(Predicted = predicted_class_balanced, Actual = test_data_scaled$default_90)
# Heatmap
ggplot(as.data.frame(conf_matrix_balanced), aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
geom_text(aes(label = Freq), color = "black") +
labs(title = "Confusion Matrix Heatmap (Balanced Data)", x = "Actual", y = "Predicted") +
theme_minimal()
#### 3. Coefficient Plot -------------------------------------
# Extract coefficients
coefficients_balanced <- summary(logistic_model_balanced)$coefficients
coef_data_balanced <- as.data.frame(coefficients_balanced)
coef_data_balanced$Variable <- rownames(coefficients_balanced)
rownames(coef_data_balanced) <- NULL
# Plot coefficients
ggplot(coef_data_balanced, aes(x = reorder(Variable, Estimate), y = Estimate)) +
geom_bar(stat = "identity", fill = "lightblue") +
coord_flip() +
labs(title = "Coefficient Plot (Balanced Data)", x = "Variable", y = "Estimate") +
theme_minimal()
### 1.1 Evaluate Model-------------------
# Predicted probabilities
predicted_prob_balanced <- predict(logistic_model_balanced, newdata = test_data_scaled, type = "response")
logit_metrics <-calculate_metrics(predicted_prob_balanced, test_data_scaled$default_90, threshold = 0.5)
logit_metrics
# find threshold for class = 1
thresholds <- seq(0, 1, by = 0.05)  # Example grid of thresholds
optimal_threshold_logit <- find_optimal_threshold(predicted_prob_balanced, test_data_scaled$default_90, thresholds)
optimal_threshold_logit
plot_metrics(optimal_threshold_logit)
### 1.2 Post-Estimation Plots---------------
par(mfrow = c(2,2))
#### 1. Model Plots-----------------
plot(logistic_model_balanced)
# ROC and AUC
roc_curve_balanced <- roc(test_data_scaled$default_90, predicted_prob_balanced)
auc_value_balanced <- auc(roc_curve_balanced)
# Plot ROC Curve
plot(roc_curve_balanced, col = "blue", main = paste("ROC Curve (AUC =", round(auc_value_balanced, 2), ")"))
abline(a = 0, b = 1, lty = 2, col = "gray")
#### 2. ROC Curve and AUC ------------------------------------
par(mfrow = c(1,1))
# ROC and AUC
roc_curve_balanced <- roc(test_data_scaled$default_90, predicted_prob_balanced)
auc_value_balanced <- auc(roc_curve_balanced)
# Plot ROC Curve
plot(roc_curve_balanced, col = "blue", main = paste("ROC Curve (AUC =", round(auc_value_balanced, 2), ")"))
abline(a = 0, b = 1, lty = 2, col = "gray")
# Main Script---------------------------
# Course: Statistical Methods for High Dimensional Data
# Final Project
# Initialize program -------------------------
## Load Required Libraries --------------------------------
rm(list=ls())
library(readxl)
library(ggplot2)
library(caret)
library(glmnet)
library(skimr)
library(reshape2)
library(caTools)
library(ResourceSelection)
library(pROC) # For AUC Curve
library(PRROC)    # For Precision-Recall Curve
library(MASS)  # For stepwise regression functions
library(car)
library(gglasso)
library(mgcv) # for GAM
library(sparsepca) # for sparse pca
library(e1071) # for SVM
library(dplyr)
library(randomForest)
library(xgboost)
library(Matrix)
library(doParallel)
library(gridExtra)
library(ggthemes)
library(ROSE)
library(fastDummies)
Sys.setlocale("LC_TIME", "en_US")
## Helper functions---------------
#### Evaluate Logistic Regression ------------
# Calculate accuracy, precission, recall, f1 from probs and actual
calculate_metrics <- function(predicted_probs, actual_labels, threshold = 0.5) {
# Convert probabilities to binary predictions based on the threshold
predicted_labels <- ifelse(predicted_probs > threshold, 1, 0)
# Create confusion matrix
conf_matrix <- confusionMatrix(factor(predicted_labels), factor(actual_labels))
# Extract components of the confusion matrix
cm <- conf_matrix$table
TP <- cm[2, 2]  # True Positives
FP <- cm[1, 2]  # False Positives
TN <- cm[1, 1]  # True Negatives
FN <- cm[2, 1]  # False Negatives
# Manually calculate metrics
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
f1_score <- 2 * (precision * recall) / (precision + recall)
accuracy <- (TP + TN) / sum(cm)
# Return results as a list
return(list(
Precision = precision,
Recall = recall,
F1 = f1_score,
Accuracy = accuracy
))
}
# Function to find the optimal threshold based on probs and actual
find_optimal_threshold <- function(predicted_probs, actual_labels, thresholds) {
results <- data.frame(Threshold = numeric(), Precision = numeric(),
Recall = numeric(), F1 = numeric(), Accuracy = numeric())
for (threshold in thresholds) {
# Safeguard against confusion matrices that don't return 4 cells
tryCatch({
metrics <- calculate_metrics(predicted_probs, actual_labels, threshold)
results <- rbind(results, c(Threshold = threshold, metrics))
}, error = function(e) {})
}
# Convert results to data frame
results <- as.data.frame(results)
# Filter for valid rows (non-NA F1 scores)
results <- results[!is.na(results$F1), ]
# Find the threshold that maximizes F1 score
optimal_threshold <- results$Threshold[which.max(results$F1)]
return(list(OptimalThreshold = optimal_threshold, Metrics = results))
}
# function to plot curves on varios levels of threshold
plot_metrics <- function(metrics) {
# Reshape data for ggplot2
metrics_long <- reshape2::melt(metrics, id.vars = "Threshold",
variable.name = "Metric", value.name = "Value")
# Plot metrics
ggplot(metrics_long, aes(x = Threshold, y = Value, color = Metric)) +
geom_line() +
labs(title = "Metrics Across Thresholds", x = "Threshold", y = "Value") +
theme_minimal()
}
## Data and plots paths ---------------------------------
data_path <- "../data/data.xlsx"
plots_dir = "../plots/grid_plots/"
data <- read_excel(data_path)
# Data Preprocessing ------------------------------------
## Additional column: Co-debtor -----------
# before removing ids, use them to check if client has co-debtor
colnames(data)
# Aggregate to count distinct 'ID Cliente' by 'No Pagaré Rotativo'
result <- aggregate(`ID Cliente` ~ `No Pagaré Rotativo`, data = data, FUN = function(x) length(unique(x)))
# Rename columns of result
colnames(result) <- c("No Pagaré Rotativo", "Distinct ID Cliente Count")
# View result max count by id
max(result$`Distinct ID Cliente Count`)
# so there is some credits with more than one client associated
# mark if the credit has more than one ID.
# Compute the distinct ID Cliente count per No Pagaré Rotativo
distinct_counts <- aggregate(`ID Cliente` ~ `No Pagaré Rotativo`, data = data, FUN = function(x) length(unique(x)))
# Add a column indicating whether the count is greater than 1
distinct_counts$MoreThanOne <- as.numeric(distinct_counts$`ID Cliente` > 1)
# Merge this information back into the original dataframe
data <- merge(data, distinct_counts[, c("No Pagaré Rotativo", "MoreThanOne")], by = "No Pagaré Rotativo", all.x = TRUE)
colnames(data)
## Initial check of the data --------------
summary(data)
anyNA(data)
## Removing unnecessary columns ------------------
# check if there are sing-val col
constant_cols <- sapply(data, function(col) length(unique(col)) == 1)
names(data)[constant_cols]
# remove them
data <- data[, !names(data) %in% "Clasificación Tipo Crédito"]
## Remove ID Variables
id_vars <- c("Código de Crédito", "ID Cliente", "No Pagaré Rotativo")
data <- data[, !names(data) %in% id_vars]
## Rename Columns for Clarity
friendly_names <- c("agency", "status", "rating", "work", "age", "civil_status",
"income_group", "city_born", "max_education", "gender",
"contributions_balance", "credit_limit", "capital_balance",
"capital_due30", "days_due", "date_approval",
"installment", "periodicity", "credit_duration", "date_limit",
"dtf_approval_date", "fx_approval_date", "city_pop_2018","datacredito","default_90", "has_codebtor")
if (length(friendly_names) == ncol(data)) {
colnames(data) <- friendly_names
} else {
stop("Column name mismatch.")
}
# Removing AGE because it is a leaker
data <- data[, !names(data) %in% c("age")]
## Date variables transformations -----------
# Create Derived Variables
data <- data %>%
mutate(
time_difference_days = as.numeric(difftime(as.Date(date_limit), as.Date(date_approval), units = "days"))
)
# Create year, month, day, weekday
# Extract features from the date-time variables
# date approval
data$m_date_approval <- format(data$date_approval, "%m")
data$wd_date_approval <- weekdays(data$date_approval)
# date limit
data$m_date_limit <- format(data$date_limit, "%m")
data$wd_date_limit <- weekdays(data$date_limit)
# Remove date_approval and date_limit:
data <- data[, !(names(data) %in% c("date_approval", "date_limit"))]
# capital_due30:
# Represents the amount by which customers have exceeded their credit limit,
### specifically for those who have been overdue for more than 30 days.
### But most of clients have not overdue the credit, so the most of values are 0
# - does not add information to our analysis
# -> It will get transformed to a binary variable 0/1 indicating if a client has overdue the credit in 30+ days
# --> assuming that 30+ days overdue is more likely to progress to 90+ days overdue rather than who's currently at 0 days
data <- data %>%
mutate(
capital_due30_binary = ifelse(capital_due30 > 0, 1, 0)
)
# Remove capital_due30 in order to keep only capital_due30_binary
data <- data[, !names(data) %in% "capital_due30"]
# Move "default_90" to the last column
data <- data[, c(setdiff(names(data), "default_90"), "default_90")]
# income_group has numbers indicating ascending groups, so it's more appropriate
# to consider it as an ordinal categorical variable instead of a numerical variable
data$income_group <- factor(data$income_group, ordered = TRUE)
# Checking distributions on the entire dataset as an initial exploration
# EDA ----
## Numeric Variables ----
numeric_data <- data %>% select(where(is.numeric))
skim(numeric_data)
### Histograms ----
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"00_EDA__numeric_vars_histograms.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
hist(numeric_data[[col_name]], main = paste("Histogram of", col_name),
xlab = col_name, col = "lightblue", border = "black")
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
### Box Plots---------------
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
plots <- list()
for (col_name in colnames(numeric_data)) {
plots[[col_name]] <- ggplot(data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal()
}
pdf(file = paste(plots_dir, "01_EDA__numeric_vars_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
grid.arrange(grobs = plots, ncol = n_cols)
dev.off()
### Density Plots--------------
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
plots <- list()
for (col_name in colnames(numeric_data)) {
plots[[col_name]] <- ggplot(data, aes(x = .data[[col_name]], fill = factor(default_90))) +
geom_density(alpha = 0.5) +
labs(title = paste("Density Plot of", col_name), x = col_name, fill = "Target") +
theme_minimal()
}
pdf(file = paste(plots_dir, "02_EDA__numeric_vars_densities.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
grid.arrange(grobs = plots, ncol = n_cols)
dev.off()
### Correlation Matrix -------------------
cor_matrix <- cor(numeric_data, use = "complete.obs")
melted_cor_matrix <- melt(cor_matrix)
melted_cor_matrix <- melted_cor_matrix[as.numeric(melted_cor_matrix$Var1) > as.numeric(melted_cor_matrix$Var2), ]
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
coord_fixed() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()  # in order to remove the grid
) +
scale_x_discrete(limits = unique(melted_cor_matrix$Var1)) +
scale_y_discrete(limits = unique(melted_cor_matrix$Var2))
## Non-Numeric Variables ----
non_numeric_data <- data %>% select(where(~ !is.numeric(.)))
unique_counts <- sapply(non_numeric_data, function(x) length(unique(x)))
mode_values <- sapply(non_numeric_data, function(x) names(which.max(table(x))))
print(mode_values)
### Chi-Squared test ----
# The output will show the Chi-square statistic, degrees of freedom, and the p-value.
# A p-value less than 0.05 indicates that there is a significant association
# between the non-numeric variable and the target variable default_90.
# Create a vector to store p-values
p_values <- c()
# Perform Chi-square tests and collect p-values
for (col_name in colnames(non_numeric_data)) {
contingency_table <- table(non_numeric_data[[col_name]], data$default_90)
chi2_result <- chisq.test(contingency_table)
# Store the p-value
p_values <- c(p_values, chi2_result$p.value)
}
# Create a data frame for plotting
chi2_results_df <- data.frame(
Variable = colnames(non_numeric_data),
P_value = p_values
)
# Plot the p-values
ggplot(chi2_results_df, aes(x = reorder(Variable, -P_value), y = P_value)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +  # Significance threshold
labs(title = "P-values from Chi-square Tests for Non-numeric Variables vs default_90",
x = "Variable",
y = "P-value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Barplots by Target -------
n_cols <- 4
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
plots <- list()
for (col_name in colnames(non_numeric_data)) {
plots[[col_name]] <- ggplot(data, aes_string(x = col_name, fill = "factor(default_90)")) +
geom_bar(position = "fill") +  # Use position = "dodge" for side-by-side bars
labs(title = paste("Bar Plot of", col_name, "by Target"),
x = col_name, y = "Proportion", fill = "Target") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
pdf(file = paste(plots_dir, "06_EDA__non_numeric_vars_target_proportions.pdf", sep=""), width = n_cols * 4.5, height = n_rows * 3)  # Adjust dimensions
grid.arrange(grobs = plots, ncol = n_cols)
dev.off()
## Log-transforms ----
# Applying log transformation only to too much skewed features bc for the others could be sufficient the scaling
data$contributions_balance <- log1p(data$contributions_balance)
data$credit_limit <- log1p(data$credit_limit)
data$capital_balance <- log1p(data$capital_balance)
data$installment <- log1p(data$installment)
data$time_difference_days <- log1p(data$time_difference_days)
# Update numeric_data dataframe...
numeric_data <- data %>% select(where(is.numeric))
# Distributions after the log-transformations (again on the entire dataset)
### Histograms
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"03_EDA__numeric_vars_after_log_histograms.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
hist(numeric_data[[col_name]], main = paste("Histogram of", col_name),
xlab = col_name, col = "lightblue", border = "black")
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
### Box Plots---------------
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
plots <- list()
for (col_name in colnames(numeric_data)) {
plots[[col_name]] <- ggplot(numeric_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal()
}
pdf(file = paste(plots_dir, "04_EDA__numeric_vars_after_log_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
grid.arrange(grobs = plots, ncol = n_cols)
dev.off()
### Density Plots--------------
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
plots <- list()
for (col_name in colnames(numeric_data)) {
plots[[col_name]] <- ggplot(numeric_data, aes(x = .data[[col_name]], fill = factor(default_90))) +
geom_density(alpha = 0.5) +
labs(title = paste("Density Plot of", col_name), x = col_name, fill = "Target") +
theme_minimal()
}
pdf(file = paste(plots_dir, "05_EDA__numeric_vars_after_log_densities.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
grid.arrange(grobs = plots, ncol = n_cols)
dev.off()
# Train-Test Split --------------------------------------
binary_vars <- names(data)[sapply(data, function(x) all(x %in% c(0, 1)))]
set.seed(123)
split <- sample.split(data$default_90, SplitRatio = 0.7)
train_data <- subset(data, split)
test_data <- subset(data, !split)
# Scaling -----------------
# do not consider binary variables for scaling:
binary_vars <- names(data)[sapply(data, function(x) all(x %in% c(0, 1)))]
# Exclude binary variables and the target from the numeric_data dataframe
vars_to_scale <- numeric_data[, !(names(numeric_data) %in% binary_vars)]
# Calculate mean and standard deviation from the training set for the variables to scale:
## Extract column names from vars_to_scale
vars_to_scale_names <- colnames(vars_to_scale)
## Mean and SD in train_data scaling vars_to_scale
mean_train <- apply(train_data[vars_to_scale_names], 2, mean)
sd_train <- apply(train_data[vars_to_scale_names], 2, sd)
# Scale the training set
train_data_scaled <- train_data
train_data_scaled[vars_to_scale_names] <- sweep(train_data[vars_to_scale_names], 2, mean_train, "-")
train_data_scaled[vars_to_scale_names] <- sweep(train_data_scaled[vars_to_scale_names], 2, sd_train, "/")
# Scale the test set
test_data_scaled <- test_data
test_data_scaled[vars_to_scale_names] <- sweep(test_data[vars_to_scale_names], 2, mean_train, "-")
test_data_scaled[vars_to_scale_names] <- sweep(test_data_scaled[vars_to_scale_names], 2, sd_train, "/")
# Check scaling Z-score -> mean = 0; sd = 1
summary(train_data_scaled[vars_to_scale_names])
apply(train_data_scaled[vars_to_scale_names], 2, sd)
# Model Training and Evaluation (only on BALANCED data) ------------------------
## Oversampling of minority class --------------
# Check how much unbalanced the data are
table(train_data_scaled$default_90)
train_data_balanced <- ovun.sample(default_90 ~ ., data = train_data_scaled, method = "over")$data
table(train_data_balanced$default_90)
## 1. Logistic Regression (Balanced) ----------------
logistic_model_balanced <- glm(default_90 ~ ., data = train_data_balanced, family = binomial)
summary(logistic_model_balanced)
### 1.1 Evaluate Model-------------------
# Predicted probabilities
predicted_prob_balanced <- predict(logistic_model_balanced, newdata = test_data_scaled, type = "response")
logit_metrics <-calculate_metrics(predicted_prob_balanced, test_data_scaled$default_90, threshold = 0.5)
logit_metrics
# find threshold for class = 1
thresholds <- seq(0, 1, by = 0.05)  # Example grid of thresholds
optimal_threshold_logit <- find_optimal_threshold(predicted_prob_balanced, test_data_scaled$default_90, thresholds)
optimal_threshold_logit
plot_metrics(optimal_threshold_logit)
# optimal is 0.6, but leave at 0.5 because is marginally the same
### 1.2 Post-Estimation Plots---------------
par(mfrow = c(2,2))
#### 1. Model Plots-----------------
plot(logistic_model_balanced)
#### 2. ROC Curve and AUC ------------------------------------
par(mfrow = c(1,1))
# ROC and AUC
roc_curve_balanced <- roc(test_data_scaled$default_90, predicted_prob_balanced)
auc_value_balanced <- auc(roc_curve_balanced)
# Plot ROC Curve
plot(roc_curve_balanced, col = "blue", main = paste("ROC Curve (AUC =", round(auc_value_balanced, 2), ")"))
abline(a = 0, b = 1, lty = 2, col = "gray")
# auc > 0.7 is reasonable model
#### 2. Confusion Matrix Heatmap -----------------------------
# Predicted classes
predicted_class_balanced <- ifelse(predicted_prob_balanced > 0.5, 1, 0)
# Confusion matrix
conf_matrix_balanced <- table(Predicted = predicted_class_balanced, Actual = test_data_scaled$default_90)
# Heatmap
ggplot(as.data.frame(conf_matrix_balanced), aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
geom_text(aes(label = Freq), color = "black") +
labs(title = "Confusion Matrix Heatmap (Balanced Data)", x = "Actual", y = "Predicted") +
theme_minimal()
#### 3. Coefficient Plot -------------------------------------
# Extract coefficients
coefficients_balanced <- summary(logistic_model_balanced)$coefficients
coef_data_balanced <- as.data.frame(coefficients_balanced)
coef_data_balanced$Variable <- rownames(coefficients_balanced)
rownames(coef_data_balanced) <- NULL
# Plot coefficients
ggplot(coef_data_balanced, aes(x = reorder(Variable, Estimate), y = Estimate)) +
geom_bar(stat = "identity", fill = "lightblue") +
coord_flip() +
labs(title = "Coefficient Plot (Balanced Data)", x = "Variable", y = "Estimate") +
theme_minimal()
## Stepwise Logistic Regression (Balanced Training Data) ----------------
### 1. Forward Selection ------------------------
start_model_balanced <- glm(default_90 ~ 1, data = train_data_balanced, family = binomial)
# Define the full model with all predictors
full_model_balanced <- glm(default_90 ~ ., data = train_data_balanced, family = binomial)
# Perform forward selection
forward_model_balanced <- step(
start_model_balanced,
scope = list(lower = start_model_balanced, upper = full_model_balanced),
direction = "forward",
trace = 0
)
summary(forward_model_balanced)
# Evaluate Forward Selection Model
forward_results_balanced <- evaluate_model(forward_model_balanced, test_data_scaled, "default_90")
