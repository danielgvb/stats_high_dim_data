max(result$`Distinct ID Cliente Count`)
# mark if the pagare has more than one ID.
# Compute the distinct ID Cliente count per No Pagaré Rotativo
distinct_counts <- aggregate(`ID Cliente` ~ `No Pagaré Rotativo`, data = data, FUN = function(x) length(unique(x)))
# Step 2: Add a column indicating whether the count is greater than 1
distinct_counts$MoreThanOne <- as.numeric(distinct_counts$`ID Cliente` > 1)
# Step 3: Merge this information back into the original dataframe
data <- merge(data, distinct_counts[, c("No Pagaré Rotativo", "MoreThanOne")], by = "No Pagaré Rotativo", all.x = TRUE)
colnames(data)
# View the updated dataframe
print(data)
## Remove ID Variables
id_vars <- c("Código de Crédito", "ID Cliente", "No Pagaré Rotativo")
data <- data[, !names(data) %in% id_vars]
## Remove Single-Value Columns
single_value_vars <- c("Clasificación Tipo Crédito")
data <- data[, !names(data) %in% single_value_vars]
## Rename Columns for Clarity
friendly_names <- c("agency", "status", "rating", "work", "age", "civil_status",
"income_group", "city_born", "max_education", "gender",
"contributions_balance", "credit_limit", "capital_balance",
"capital_due30", "days_due", "date_approval",
"installment", "periodicity", "credit_duration", "date_limit",
"dtf_approval_date", "fx_approval_date","city_pop_2018", "default_90", "has_codebtor")
if (length(friendly_names) == ncol(data)) {
colnames(data) <- friendly_names
} else {
stop("Column name mismatch.")
}
## Handle Missing Values
anyNA(data)
## Filter Credit Limit > 50,000
data <- data[data$credit_limit > 50000, ]
## DateTime variables-----------
# Create Derived Variables
data <- data %>%
mutate(
time_difference_days = as.numeric(difftime(as.Date(date_limit), as.Date(date_approval), units = "days"))
)
# First create year, month, day, weekday
# Extract features from the date-time variables
# date approval
data$m_date_approval <- format(data$date_approval, "%m")
data$wd_date_approval <- weekdays(data$date_approval)
# date limit
data$m_date_limit <- format(data$date_limit, "%m")
data$wd_date_limit <- weekdays(data$date_limit)
## Convert POSIXct to numeric
## Identify columns of type POSIXct
posix_columns <- sapply(data, function(col) inherits(col, "POSIXct"))
## Convert POSIXct columns to numeric
data[posix_columns] <- lapply(data[posix_columns], as.numeric)
## Convert Characters to Factors
data[] <- lapply(data, function(x) if (is.character(x)) as.factor(x) else x)
## Convert all numeric to log
# Identify numeric columns in the dataframe
numeric_columns <- sapply(data, is.numeric)
# Exclude the specified columns
exclude_columns <- c("default_90", "dtf_apporval_date")
columns_to_transform <- setdiff(names(data)[numeric_columns], exclude_columns)
# Move "default_90" to the last column
data <- data[, c(setdiff(names(data), "default_90"), "default_90")]
# Train-Test Split --------------------------------------
set.seed(123)
split <- sample.split(data$default_90, SplitRatio = 0.7)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
numeric_data <- train_data[sapply(train_data, is.numeric)]
skim(numeric_data)
### Histograms
for (col_name in colnames(numeric_data)) {
hist(numeric_data[[col_name]], main = paste("Histogram of", col_name),
xlab = col_name, col = "lightblue", border = "black")
}
### Box Plots---------------
for (col_name in colnames(numeric_data)) {
print(
ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +  # Add transparency to boxplots
labs(
title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target"
) +
theme_economist() +  # Apply The Economist theme
scale_fill_economist() +  # Use The Economist fill palette
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels if needed
axis.title.x = element_text(margin = margin(t = 10))  # Add margin to x-axis title
)
)
}
install.packages("Metrics")
# Load Required Libraries --------------------------------
rm(list=ls())
library(readxl)
library(dplyr)
library(ggplot2)
library(caret)
library(glmnet)
library(skimr)
library(reshape2)
library(caTools)
library(ResourceSelection)
library(pROC) # For AUC Curve
library(PRROC)    # For Precision-Recall Curve
library(MASS)  # For stepwise regression functions
library(car)
library(gglasso)
library(doParallel)
library(mgcv) # for GAM
library(sparsepca) # for sparse pca
library(e1071) # for SVM
library(Metrics) # For Precission, Recall and F1
# Load Required Libraries --------------------------------
rm(list=ls())
library(readxl)
library(dplyr)
library(ggplot2)
library(caret)
library(glmnet)
library(skimr)
library(reshape2)
library(caTools)
library(ResourceSelection)
library(pROC) # For AUC Curve
library(PRROC)    # For Precision-Recall Curve
library(MASS)  # For stepwise regression functions
library(car)
library(gglasso)
library(doParallel)
library(mgcv) # for GAM
library(sparsepca) # for sparse pca
library(e1071) # for SVM
library(Metrics) # For Precission, Recall and F1
# Set Working Directory ---------------------------------
data_path <- "../data/data.xlsx"
# Import Data -------------------------------------------
data <- read_excel(data_path)
# Data Preprocessing ------------------------------------
## Co-debtor-----------
# before removing ids, use them to check if client has co-debtor
colnames(data)
# Aggregate to count distinct 'ID Cliente' by 'No Pagaré Rotativo'
result <- aggregate(`ID Cliente` ~ `No Pagaré Rotativo`, data = data, FUN = function(x) length(unique(x)))
# Rename columns for clarity (optional)
colnames(result) <- c("No Pagaré Rotativo", "Distinct ID Cliente Count")
# View result
max(result$`Distinct ID Cliente Count`)
# mark if the pagare has more than one ID.
# Compute the distinct ID Cliente count per No Pagaré Rotativo
distinct_counts <- aggregate(`ID Cliente` ~ `No Pagaré Rotativo`, data = data, FUN = function(x) length(unique(x)))
# Step 2: Add a column indicating whether the count is greater than 1
distinct_counts$MoreThanOne <- as.numeric(distinct_counts$`ID Cliente` > 1)
# Step 3: Merge this information back into the original dataframe
data <- merge(data, distinct_counts[, c("No Pagaré Rotativo", "MoreThanOne")], by = "No Pagaré Rotativo", all.x = TRUE)
colnames(data)
# View the updated dataframe
print(data)
## Remove ID Variables
id_vars <- c("Código de Crédito", "ID Cliente", "No Pagaré Rotativo")
data <- data[, !names(data) %in% id_vars]
## Remove Single-Value Columns
single_value_vars <- c("Clasificación Tipo Crédito")
data <- data[, !names(data) %in% single_value_vars]
## Rename Columns for Clarity
friendly_names <- c("agency", "status", "rating", "work", "age", "civil_status",
"income_group", "city_born", "max_education", "gender",
"contributions_balance", "credit_limit", "capital_balance",
"capital_due30", "days_due", "date_approval",
"installment", "periodicity", "credit_duration", "date_limit",
"dtf_approval_date", "fx_approval_date", "city_pop_2018","default_90", "has_codebtor")
if (length(friendly_names) == ncol(data)) {
colnames(data) <- friendly_names
} else {
stop("Column name mismatch.")
}
## Handle Missing Values
na_counts <- colSums(is.na(data))
print(na_counts)
# Transformations ---------------------------------------
## Filter Credit Limit > 50,000
data <- data[data$credit_limit > 50000, ]
## Map Periodicity to Numeric
# data <- data %>%
#   mutate(periodicity_num = case_when(
#     periodicity == "Mensual" ~ 30,
#     periodicity == "Bimensual" ~ 60,
#     periodicity == "Quincenal" ~ 15,
#     TRUE ~ NA_real_
#   )) %>%
#   select(-periodicity)
## Map Education Levels to Numeric
# If we remove this then the model does not find min lambda
# data <- data %>%
#   mutate(max_education = case_when(
#     max_education == "primaria" ~ 1,
#     max_education == "secundaria" ~ 2,
#     max_education == "técnico" ~ 3,
#     max_education == "tecnólogo" ~ 4,
#     max_education == "Universitario" ~ 5,
#     max_education == "Posgrado" ~ 6,
#     TRUE ~ NA_real_
#   ))
## Create Derived Variables
data <- data %>%
mutate(
#installment_periodic = installment / periodicity_num,
time_difference_days = as.numeric(difftime(as.Date(date_limit), as.Date(date_approval), units = "days"))
)
## Date furhter information
# First create year, month, day, weekday
# Extract features from the date-time variables
# date approval
data$m_date_approval <- format(data$date_approval, "%m")
data$wd_date_approval <- weekdays(data$date_approval)
# date limit
data$m_date_limit <- format(data$date_limit, "%m")
data$wd_date_limit <- weekdays(data$date_limit)
## Convert POSIXct to numeric
## Identify columns of type POSIXct
posix_columns <- sapply(data, function(col) inherits(col, "POSIXct"))
## Convert POSIXct columns to numeric
data[posix_columns] <- lapply(data[posix_columns], as.numeric)
## Convert Characters to Factors
data[] <- lapply(data, function(x) if (is.character(x)) as.factor(x) else x)
str(data)
## Convert all numeric to log
# Identify numeric columns in the dataframe
numeric_columns <- sapply(data, is.numeric)
# Exclude the specified columns
exclude_columns <- c("default_90", "dtf_apporval_date", "has_codebtor")
columns_to_transform <- setdiff(names(data)[numeric_columns], exclude_columns)
## Log transform------------
# Apply the natural logarithm to the selected columns, adding 1 to handle zeros
data[columns_to_transform] <- lapply(data[columns_to_transform], function(col) log(col + 1))
# Move "default_90" to the last column
data <- data[, c(setdiff(names(data), "default_90"), "default_90")]
#REMOVE AGE because of Noise--------------
data <- data[, !names(data) %in% c("age")]
# Train-Test Split --------------------------------------
set.seed(123)
split <- sample.split(data$default_90, SplitRatio = 0.7)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
colnames(train_data)
# Exploratory Data Analysis -----------------------------
## Numeric Variables------------
numeric_data <- train_data[sapply(train_data, is.numeric)]
skim(numeric_data)
### Histograms
for (col_name in colnames(numeric_data)) {
hist(numeric_data[[col_name]], main = paste("Histogram of", col_name),
xlab = col_name, col = "lightblue", border = "black")
}
### Box Plots---------------
for (col_name in colnames(numeric_data)) {
print(ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal())
}
### Density Plots--------------
for (col_name in colnames(numeric_data)) {
print(ggplot(train_data, aes(x = .data[[col_name]], fill = factor(default_90))) +
geom_density(alpha = 0.5) +
labs(title = paste("Density Plot of", col_name), x = col_name, fill = "Target") +
theme_minimal())
}
### Non-Numeric Variables------------
non_numeric_data <- train_data[!sapply(train_data, is.numeric)]
unique_counts <- sapply(non_numeric_data, function(x) length(unique(x)))
mode_values <- sapply(non_numeric_data, function(x) names(which.max(table(x))))
print(mode_values)
### Correlation Analysis ----------------------------------
cor_matrix <- cor(numeric_data, use = "complete.obs")
cor_matrix
melted_cor_matrix <- melt(cor_matrix)
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
coord_fixed() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Barplots by Target-------
for (col_name in colnames(non_numeric_data)) {
print(
ggplot(train_data, aes_string(x = col_name, fill = "factor(default_90)")) +
geom_bar(position = "fill") +  # Use position = "dodge" for side-by-side bars
labs(title = paste("Bar Plot of", col_name, "by Target"),
x = col_name, y = "Proportion", fill = "Target") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
)
}
# All bimensual are defaulty (is just 1)
### Chi Squared------------
# The output will show the Chi-square statistic, degrees of freedom, and the p-value.
# A p-value less than 0.05 indicates that there is a significant association
# between the non-numeric variable and the target variable default_90.
# Create a vector to store p-values
p_values <- c()
# Perform Chi-square tests and collect p-values
for (col_name in colnames(non_numeric_data)) {
contingency_table <- table(non_numeric_data[[col_name]], train_data$default_90)
chi2_result <- chisq.test(contingency_table)
# Store the p-value
p_values <- c(p_values, chi2_result$p.value)
}
contingency_table
# Create a data frame for plotting
chi2_results_df <- data.frame(
Variable = colnames(non_numeric_data),
P_value = p_values
)
# Plot the p-values
ggplot(chi2_results_df, aes(x = reorder(Variable, -P_value), y = P_value)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +  # Significance threshold
labs(title = "P-values from Chi-square Tests for Non-numeric Variables vs default_90",
x = "Variable",
y = "P-value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# periodicity, wd_date_limit, civil_status, agency, city_born
# Model Training and Evaluation ------------------------
## Logistic Regression----------------
logistic_model <- glm(default_90 ~ ., data = train_data, family = binomial)
### Evaluate Logistic Regression------------
# Make predictions on the test data
predicted_probs <- predict(logistic_model, newdata = test_data, type = "response")
# Convert probabilities to binary predictions using a threshold (default: 0.5)
predicted_labels <- ifelse(predicted_probs > 0.5, 1, 0)
# Get actual labels from the test data
actual_labels <- test_data$default_90
# Calculate metrics
accuracy <- accuracy(actual_labels, predicted_labels)
precision <- precision(actual_labels, predicted_labels)
recall <- recall(actual_labels, predicted_labels)
f1_score <- f1(actual_labels, predicted_labels)
# Print metrics
cat("Accuracy:", accuracy, "\n")
cat("Precision:", precision, "\n")
cat("Recall:", recall, "\n")
cat("F1 Score:", f1_score, "\n")
actual_labels
# Calculate metrics
accuracy <- accuracy(actual_labels, predicted_labels)
precision <- precision(actual_labels, predicted_labels)
recall <- recall(actual_labels, predicted_labels)
f1_score <- f1(actual_labels, predicted_labels)
# Print metrics
cat("Accuracy:", accuracy, "\n")
cat("Precision:", precision, "\n")
cat("Recall:", recall, "\n")
cat("F1 Score:", f1_score, "\n")
f1 <- 2 * (precision * recall) / (precision + recall)
f1
cat("F1 Score:", f1_score, "\n")
f1 <- 2 * (precision * recall) / (precision + recall)
f1
## Logistic Regression----------------
logistic_model <- glm(default_90 ~ ., data = train_data, family = binomial)
summary(logistic_model)
### Evaluate Logistic Regression------------
# Make predictions on the test data
predicted_probs <- predict(logistic_model, newdata = test_data, type = "response")
# Convert probabilities to binary predictions using a threshold (default: 0.5)
predicted_labels <- ifelse(predicted_probs > 0.5, 1, 0)
# Get actual labels from the test data
actual_labels <- test_data$default_90
# Calculate metrics
accuracy <- accuracy(actual_labels, predicted_labels)
precision <- precision(actual_labels, predicted_labels)
recall <- recall(actual_labels, predicted_labels)
# Print metrics
cat("Accuracy:", accuracy, "\n")
cat("Precision:", precision, "\n")
xtab <- table(predicted, actual)
xtab <- table(predicted_labels, actual_labels)
cm <- caret::confusionMatrix(xtab)
cm
cm
xtab <- table(predicted_labels, actual_labels)
cm <- caret::confusionMatrix(xtab)
cm
cm$table
# with caret
logistic_model <- glm(default_90 ~ ., data = train_data, family = binomial)
# Make predictions on the test data
predicted_probs <- predict(logistic_model, newdata = test_data, type = "response")
# Convert probabilities to binary predictions using a threshold (default: 0.5)
predicted_labels <- ifelse(predicted_probs > 0.5, 1, 0)
# Get actual labels from the test data
actual_labels <- test_data$default_90
# Create a confusion matrix
confusion_matrix <- confusionMatrix(factor(predicted_labels), factor(actual_labels))
# Print metrics
cat("Accuracy:", confusion_matrix$overall["Accuracy"], "\n")
cat("Precision:", confusion_matrix$byClass["Precision"], "\n")
cat("Recall:", confusion_matrix$byClass["Recall"], "\n")
cat("F1 Score:", confusion_matrix$byClass["F1"], "\n")
confusion_matrix
# Create a confusion matrix
conf_matrix <- confusionMatrix(factor(predicted_labels), factor(actual_labels))
# Extract components of the confusion matrix
cm <- conf_matrix$table
TP <- cm[2, 2]  # True Positives
FP <- cm[1, 2]  # False Positives
TN <- cm[1, 1]  # True Negatives
FN <- cm[2, 1]  # False Negatives
# Manually calculate metrics
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
f1_score <- 2 * (precision * recall) / (precision + recall)
# Print metrics
cat("Precision:", precision, "\n")
cat("Recall:", recall, "\n")
cat("F1 Score:", f1_score, "\n")
# Define the function
calculate_metrics <- function(predicted_probs, actual_labels, threshold = 0.5) {
# Convert probabilities to binary predictions based on the threshold
predicted_labels <- ifelse(predicted_probs > threshold, 1, 0)
# Create confusion matrix
conf_matrix <- confusionMatrix(factor(predicted_labels), factor(actual_labels))
# Extract components of the confusion matrix
cm <- conf_matrix$table
TP <- cm[2, 2]  # True Positives
FP <- cm[1, 2]  # False Positives
TN <- cm[1, 1]  # True Negatives
FN <- cm[2, 1]  # False Negatives
# Manually calculate metrics
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
f1_score <- 2 * (precision * recall) / (precision + recall)
accuracy <- (TP + TN) / sum(cm)
# Return results as a list
return(list(
Precision = precision,
Recall = recall,
F1 = f1_score,
Accuracy = accuracy
))
}
# Define the function
calculate_metrics <- function(predicted_probs, actual_labels, threshold = 0.5) {
# Convert probabilities to binary predictions based on the threshold
predicted_labels <- ifelse(predicted_probs > threshold, 1, 0)
# Create confusion matrix
conf_matrix <- confusionMatrix(factor(predicted_labels), factor(actual_labels))
# Extract components of the confusion matrix
cm <- conf_matrix$table
TP <- cm[2, 2]  # True Positives
FP <- cm[1, 2]  # False Positives
TN <- cm[1, 1]  # True Negatives
FN <- cm[2, 1]  # False Negatives
# Manually calculate metrics
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
f1_score <- 2 * (precision * recall) / (precision + recall)
accuracy <- (TP + TN) / sum(cm)
# Return results as a list
return(list(
Precision = precision,
Recall = recall,
F1 = f1_score,
Accuracy = accuracy
))
}
## Logistic Regression----------------
logistic_model <- glm(default_90 ~ ., data = train_data, family = binomial)
# Make predictions on the test data
predicted_probs <- predict(logistic_model, newdata = test_data, type = "response")
# Get metrics:
calculate_metrics(predicted_probs, test_data$default_90)
# Get metrics:
calculate_metrics(predicted_probs, test_data$default_90)
# Get metrics:
logit_metrics <- calculate_metrics(predicted_probs, test_data$default_90)
logit_metrics
# accuracy is worse than naive model
# f1 score > 0.7 is good ?
### Post-Estimation Plots---------------
par(mfrow = c(2,2))
plot(logistic_model)
par(mfrow = c(1,1))
#### 1. ROC Curve and AUC ------------------------------------
# Predicted probabilities for the test data
predicted_prob <- predict(logistic_model, newdata = test_data, type = "response")
#### 1. ROC Curve and AUC ------------------------------------
# Predicted probabilities for the test data
predicted_prob <- predict(logistic_model, newdata = test_data, type = "response")
predicted_probs
predicted_probs == predicted_prob
all(predicted_probs == predicted_prob)
# True labels
true_labels <- test_data$default_90
roc_curve <- roc(true_labels, predicted_probs)
auc_value <- auc(roc_curve)
# True labels
true_labels <- test_data$default_90
roc_curve <- roc(true_labels, predicted_probs)
#### 1. ROC Curve and AUC ------------------------------------
# Predicted probabilities for the test data
predicted_prob <- predict(logistic_model, newdata = test_data, type = "response")
# True labels
true_labels <- test_data$default_90
roc_curve <- roc(true_labels, predicted_prob)
auc_value <- auc(roc_curve)
