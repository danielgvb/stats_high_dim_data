data$wd_date_approval_cos <- cos(2 * pi * as.numeric(data$wd_date_approval) / 7)
# date limit
data$m_date_limit <- format(data$date_limit, "%m")
data$m_date_limit_sin <- sin(2 * pi * as.numeric(data$m_date_limit) / 12)
data$m_date_limit_cos <- cos(2 * pi * as.numeric(data$m_date_limit) / 12)
data$wd_date_limit <- weekdays(data$date_limit)
data$wd_date_limit <- factor(data$wd_date_limit, levels = weekday_levels)
data$wd_date_limit_sin <- sin(2 * pi * as.numeric(data$wd_date_limit) / 7)
data$wd_date_limit_cos <- cos(2 * pi * as.numeric(data$wd_date_limit) / 7)
## Convert POSIXct to numeric
## Identify columns of type POSIXct
posix_columns <- sapply(data, function(col) inherits(col, "POSIXct"))
## Convert POSIXct columns to numeric
data[posix_columns] <- lapply(data[posix_columns], as.numeric)
## Convert Characters to Factors
data[] <- lapply(data, function(x) if (is.character(x)) as.factor(x) else x)
## Convert all numeric to log
# Identify numeric columns in the dataframe
numeric_columns <- sapply(data, is.numeric)
# Exclude the specified columns
exclude_columns <- c("default_90", "dtf_apporval_date")
columns_to_transform <- setdiff(names(data)[numeric_columns], exclude_columns)
## Log transform------------
# Apply the natural logarithm to the selected columns, adding 1 to handle zeros
# ----------------- ESTO QUIZÁ CAMBIE -----------------
data[columns_to_transform] <- lapply(data[columns_to_transform], function(col) log(col + 1))
# Move "default_90" to the last column
data <- data[, c(setdiff(names(data), "default_90"), "default_90")]
#REMOVE AGE because of Noise--------------
data <- data[, !names(data) %in% c("age")]
# Train-Test Split --------------------------------------
set.seed(123)
split <- sample.split(data$default_90, SplitRatio = 0.7)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
# Exploratory Data Analysis -----------------------------
## Numeric Variables------------
# numeric_data <- train_data %>% select(where(is.numeric)) DEPRECATED
numeric_data <- train_data[sapply(train_data, is.numeric)]
skim(numeric_data)
plots_dir = "../plots/rafa/"
### Histograms
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf((plots_dir,"plots/00_EDA__numeric_vars_histograms.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
(plots_dir,"00_EDA__numeric_vars_histograms.pdf", sep="")
paste(plots_dir,"00_EDA__numeric_vars_histograms.pdf", sep="")
pdf(paste(plots_dir,"00_EDA__numeric_vars_histograms.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
getwd()
pdf(paste(plots_dir,"00_EDA__numeric_vars_histograms.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
hist(numeric_data[[col_name]], main = paste("Histogram of", col_name),
xlab = col_name, col = "lightblue", border = "black")
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
# Load Required Libraries --------------------------------
rm(list=ls())
library(readxl)
library(dplyr)
library(ggplot2)
library(caret)
library(glmnet)
library(skimr)
library(reshape2)
library(caTools)
library(ResourceSelection)
library(pROC) # For AUC Curve
library(PRROC)    # For Precision-Recall Curve
library(MASS)  # For stepwise regression functions
library(car)
library(gglasso)
library(doParallel)
library(mgcv) # for GAM
library(sparsepca) # for sparse pca
library(e1071) # for SVM
# Set Working Directory ---------------------------------
data_path <- "../data/data.xlsx"
plots_dir = "../plots/rafa/"
# Import Data -------------------------------------------
data <- read_excel(data_path)
# Data Preprocessing ------------------------------------
## Remove ID Variables
id_vars <- c("Código de Crédito", "ID Cliente", "No Pagaré Rotativo")
data <- data[, !names(data) %in% id_vars]
## Remove Single-Value Columns
single_value_vars <- c("Clasificación Tipo Crédito")
data <- data[, !names(data) %in% single_value_vars]
## Rename Columns for Clarity
friendly_names <- c("agency", "status", "rating", "work", "age", "civil_status",
"income_group", "city_born", "max_education", "gender",
"contributions_balance", "credit_limit", "capital_balance",
"capital_due30", "days_due", "date_approval",
"installment", "periodicity", "credit_duration", "date_limit",
"dtf_approval_date", "fx_approval_date", "default_90")
if (length(friendly_names) == ncol(data)) {
colnames(data) <- friendly_names
} else {
stop("Column name mismatch.")
}
## Handle Missing Values
na_counts <- colSums(is.na(data))
print(na_counts)
# Transformations ---------------------------------------
## Filter Credit Limit > 50,000
data <- data[data$credit_limit > 50000, ]
## Map Periodicity to Numeric
# data <- data %>%
#   mutate(periodicity_num = case_when(
#     periodicity == "Mensual" ~ 30,
#     periodicity == "Bimensual" ~ 60,
#     periodicity == "Quincenal" ~ 15,
#     TRUE ~ NA_real_
#   )) %>%
#   select(-periodicity)
## Map Education Levels to Numeric
# If we remove this then the model does not find min lambda
# data <- data %>%
#   mutate(max_education = case_when(
#     max_education == "primaria" ~ 1,
#     max_education == "secundaria" ~ 2,
#     max_education == "técnico" ~ 3,
#     max_education == "tecnólogo" ~ 4,
#     max_education == "Universitario" ~ 5,
#     max_education == "Posgrado" ~ 6,
#     TRUE ~ NA_real_
#   ))
## Create Derived Variables
data <- data %>%
mutate(
#installment_periodic = installment / periodicity_num,
time_difference_days = as.numeric(difftime(as.Date(date_limit), as.Date(date_approval), units = "days"))
)
## Date furhter information
# First create year, month, day, weekday
# Extract features from the date-time variables
Sys.setlocale("LC_TIME", "en_US")
weekday_levels <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# date approval
data$m_date_approval <- format(data$date_approval, "%m")
data$m_date_approval_sin <- sin(2 * pi * as.numeric(data$m_date_approval) / 12)
data$m_date_approval_cos <- cos(2 * pi * as.numeric(data$m_date_approval) / 12)
data$wd_date_approval <- weekdays(data$date_approval)
data$wd_date_approval <- factor(data$wd_date_approval, levels = weekday_levels)
data$wd_date_approval_sin <- sin(2 * pi * as.numeric(data$wd_date_approval) / 7)
data$wd_date_approval_cos <- cos(2 * pi * as.numeric(data$wd_date_approval) / 7)
# date limit
data$m_date_limit <- format(data$date_limit, "%m")
data$m_date_limit_sin <- sin(2 * pi * as.numeric(data$m_date_limit) / 12)
data$m_date_limit_cos <- cos(2 * pi * as.numeric(data$m_date_limit) / 12)
data$wd_date_limit <- weekdays(data$date_limit)
data$wd_date_limit <- factor(data$wd_date_limit, levels = weekday_levels)
data$wd_date_limit_sin <- sin(2 * pi * as.numeric(data$wd_date_limit) / 7)
data$wd_date_limit_cos <- cos(2 * pi * as.numeric(data$wd_date_limit) / 7)
## Convert POSIXct to numeric
## Identify columns of type POSIXct
posix_columns <- sapply(data, function(col) inherits(col, "POSIXct"))
## Convert POSIXct columns to numeric
data[posix_columns] <- lapply(data[posix_columns], as.numeric)
## Convert Characters to Factors
data[] <- lapply(data, function(x) if (is.character(x)) as.factor(x) else x)
## Convert all numeric to log
# Identify numeric columns in the dataframe
numeric_columns <- sapply(data, is.numeric)
# Exclude the specified columns
exclude_columns <- c("default_90", "dtf_apporval_date")
columns_to_transform <- setdiff(names(data)[numeric_columns], exclude_columns)
## Log transform------------
# Apply the natural logarithm to the selected columns, adding 1 to handle zeros
# ----------------- ESTO QUIZÁ CAMBIE -----------------
data[columns_to_transform] <- lapply(data[columns_to_transform], function(col) log(col + 1))
# Move "default_90" to the last column
data <- data[, c(setdiff(names(data), "default_90"), "default_90")]
#REMOVE AGE because of Noise--------------
data <- data[, !names(data) %in% c("age")]
# Train-Test Split --------------------------------------
set.seed(123)
split <- sample.split(data$default_90, SplitRatio = 0.7)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
# Exploratory Data Analysis -----------------------------
## Numeric Variables------------
# numeric_data <- train_data %>% select(where(is.numeric)) DEPRECATED
numeric_data <- train_data[sapply(train_data, is.numeric)]
skim(numeric_data)
### Histograms
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"00_EDA__numeric_vars_histograms.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
hist(numeric_data[[col_name]], main = paste("Histogram of", col_name),
xlab = col_name, col = "lightblue", border = "black")
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
### Box Plots---------------
# for (col_name in colnames(numeric_data)) {
#   print(ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
#           geom_boxplot(alpha = 0.7) +
#           labs(title = paste("Boxplot of", col_name, "by Target"),
#                x = "Target",
#                y = col_name,
#                fill = "Target") +
#           theme_minimal())
# }
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"01_EDA__numeric_vars_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
print(ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal())
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
clear
clc
clean
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"01_EDA__numeric_vars_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
print(ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal())
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"01_EDA__numeric_vars_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal()
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"01_EDA__numeric_vars_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal()
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"01_EDA__numeric_vars_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
print(ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal())
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
library(gridExtra)
install.packages('gridExtra')
# Load Required Libraries --------------------------------
rm(list=ls())
library(readxl)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(caret)
library(glmnet)
library(skimr)
library(reshape2)
library(caTools)
library(ResourceSelection)
library(pROC) # For AUC Curve
library(PRROC)    # For Precision-Recall Curve
library(MASS)  # For stepwise regression functions
library(car)
library(gglasso)
library(doParallel)
library(mgcv) # for GAM
library(sparsepca) # for sparse pca
library(e1071) # for SVM
# Set Working Directory ---------------------------------
data_path <- "../data/data.xlsx"
plots_dir = "../plots/rafa/"
# Import Data -------------------------------------------
data <- read_excel(data_path)
# Data Preprocessing ------------------------------------
## Remove ID Variables
id_vars <- c("Código de Crédito", "ID Cliente", "No Pagaré Rotativo")
data <- data[, !names(data) %in% id_vars]
## Remove Single-Value Columns
single_value_vars <- c("Clasificación Tipo Crédito")
data <- data[, !names(data) %in% single_value_vars]
## Rename Columns for Clarity
friendly_names <- c("agency", "status", "rating", "work", "age", "civil_status",
"income_group", "city_born", "max_education", "gender",
"contributions_balance", "credit_limit", "capital_balance",
"capital_due30", "days_due", "date_approval",
"installment", "periodicity", "credit_duration", "date_limit",
"dtf_approval_date", "fx_approval_date", "default_90")
if (length(friendly_names) == ncol(data)) {
colnames(data) <- friendly_names
} else {
stop("Column name mismatch.")
}
## Handle Missing Values
na_counts <- colSums(is.na(data))
print(na_counts)
# Transformations ---------------------------------------
## Filter Credit Limit > 50,000
data <- data[data$credit_limit > 50000, ]
## Map Periodicity to Numeric
# data <- data %>%
#   mutate(periodicity_num = case_when(
#     periodicity == "Mensual" ~ 30,
#     periodicity == "Bimensual" ~ 60,
#     periodicity == "Quincenal" ~ 15,
#     TRUE ~ NA_real_
#   )) %>%
#   select(-periodicity)
## Map Education Levels to Numeric
# If we remove this then the model does not find min lambda
# data <- data %>%
#   mutate(max_education = case_when(
#     max_education == "primaria" ~ 1,
#     max_education == "secundaria" ~ 2,
#     max_education == "técnico" ~ 3,
#     max_education == "tecnólogo" ~ 4,
#     max_education == "Universitario" ~ 5,
#     max_education == "Posgrado" ~ 6,
#     TRUE ~ NA_real_
#   ))
## Create Derived Variables
data <- data %>%
mutate(
#installment_periodic = installment / periodicity_num,
time_difference_days = as.numeric(difftime(as.Date(date_limit), as.Date(date_approval), units = "days"))
)
## Date furhter information
# First create year, month, day, weekday
# Extract features from the date-time variables
Sys.setlocale("LC_TIME", "en_US")
weekday_levels <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
# date approval
data$m_date_approval <- format(data$date_approval, "%m")
data$m_date_approval_sin <- sin(2 * pi * as.numeric(data$m_date_approval) / 12)
data$m_date_approval_cos <- cos(2 * pi * as.numeric(data$m_date_approval) / 12)
data$wd_date_approval <- weekdays(data$date_approval)
data$wd_date_approval <- factor(data$wd_date_approval, levels = weekday_levels)
data$wd_date_approval_sin <- sin(2 * pi * as.numeric(data$wd_date_approval) / 7)
data$wd_date_approval_cos <- cos(2 * pi * as.numeric(data$wd_date_approval) / 7)
# date limit
data$m_date_limit <- format(data$date_limit, "%m")
data$m_date_limit_sin <- sin(2 * pi * as.numeric(data$m_date_limit) / 12)
data$m_date_limit_cos <- cos(2 * pi * as.numeric(data$m_date_limit) / 12)
data$wd_date_limit <- weekdays(data$date_limit)
data$wd_date_limit <- factor(data$wd_date_limit, levels = weekday_levels)
data$wd_date_limit_sin <- sin(2 * pi * as.numeric(data$wd_date_limit) / 7)
data$wd_date_limit_cos <- cos(2 * pi * as.numeric(data$wd_date_limit) / 7)
## Convert POSIXct to numeric
## Identify columns of type POSIXct
posix_columns <- sapply(data, function(col) inherits(col, "POSIXct"))
## Convert POSIXct columns to numeric
data[posix_columns] <- lapply(data[posix_columns], as.numeric)
## Convert Characters to Factors
data[] <- lapply(data, function(x) if (is.character(x)) as.factor(x) else x)
## Convert all numeric to log
# Identify numeric columns in the dataframe
numeric_columns <- sapply(data, is.numeric)
# Exclude the specified columns
exclude_columns <- c("default_90", "dtf_apporval_date")
columns_to_transform <- setdiff(names(data)[numeric_columns], exclude_columns)
## Log transform------------
# Apply the natural logarithm to the selected columns, adding 1 to handle zeros
# ----------------- ESTO QUIZÁ CAMBIE -----------------
data[columns_to_transform] <- lapply(data[columns_to_transform], function(col) log(col + 1))
# Move "default_90" to the last column
data <- data[, c(setdiff(names(data), "default_90"), "default_90")]
#REMOVE AGE because of Noise--------------
data <- data[, !names(data) %in% c("age")]
# Train-Test Split --------------------------------------
set.seed(123)
split <- sample.split(data$default_90, SplitRatio = 0.7)
train_data <- subset(data, split == TRUE)
test_data <- subset(data, split == FALSE)
# Exploratory Data Analysis -----------------------------
## Numeric Variables------------
# numeric_data <- train_data %>% select(where(is.numeric)) DEPRECATED
numeric_data <- train_data[sapply(train_data, is.numeric)]
skim(numeric_data)
### Histograms
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
pdf(paste(plots_dir,"00_EDA__numeric_vars_histograms.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
par(mfrow = c(n_rows, n_cols))
for (col_name in colnames(numeric_data)) {
hist(numeric_data[[col_name]], main = paste("Histogram of", col_name),
xlab = col_name, col = "lightblue", border = "black")
}
dev.off()  # Close the PDF device
par(mfrow = c(1, 1))
### Box Plots---------------
# for (col_name in colnames(numeric_data)) {
#   print(ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
#           geom_boxplot(alpha = 0.7) +
#           labs(title = paste("Boxplot of", col_name, "by Target"),
#                x = "Target",
#                y = col_name,
#                fill = "Target") +
#           theme_minimal())
# }
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
plots <- list()
for (col_name in colnames(numeric_data)) {
plots[[col_name]] <- ggplot(train_data, aes(x = factor(default_90), y = .data[[col_name]], fill = factor(default_90))) +
geom_boxplot(alpha = 0.7) +
labs(title = paste("Boxplot of", col_name, "by Target"),
x = "Target",
y = col_name,
fill = "Target") +
theme_minimal()
}
# Arrange plots in a grid and save to PDF
pdf(file = paste(plots_dir, "01_EDA__numeric_vars_boxplots.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
grid.arrange(grobs = plots, ncol = n_cols)
dev.off()
n_cols <- 5
n_rows <- ceiling(length(colnames(numeric_data)) / n_cols)
plots <- list()
for (col_name in colnames(numeric_data)) {
plots[[col_name]] <- ggplot(train_data, aes(x = .data[[col_name]], fill = factor(default_90))) +
geom_density(alpha = 0.5) +
labs(title = paste("Density Plot of", col_name), x = col_name, fill = "Target") +
theme_minimal()
}
# Arrange plots in a grid and save to PDF
pdf(file = paste(plots_dir, "02_EDA__numeric_vars_densities.pdf", sep=""), width = n_cols * 3, height = n_rows * 3)  # Adjust dimensions
grid.arrange(grobs = plots, ncol = n_cols)
dev.off()
# Load Required Libraries --------------------------------
rm(list=ls())
library(readxl)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(caret)
library(glmnet)
library(skimr)
library(reshape2)
library(caTools)
library(ResourceSelection)
library(pROC) # For AUC Curve
library(PRROC)    # For Precision-Recall Curve
library(MASS)  # For stepwise regression functions
library(car)
library(gglasso)
library(doParallel)
library(mgcv) # for GAM
library(sparsepca) # for sparse pca
library(e1071) # for SVM
# Set Working Directory ---------------------------------
data_path <- "../data/data.xlsx"
plots_dir = "../plots/rafa/"
# Import Data -------------------------------------------
data <- read_excel(data_path)
# Data Preprocessing ------------------------------------
## Remove ID Variables
id_vars <- c("Código de Crédito", "ID Cliente", "No Pagaré Rotativo")
data <- data[, !names(data) %in% id_vars]
## Remove Single-Value Columns
single_value_vars <- c("Clasificación Tipo Crédito")
data <- data[, !names(data) %in% single_value_vars]
## Rename Columns for Clarity
friendly_names <- c("agency", "status", "rating", "work", "age", "civil_status",
"income_group", "city_born", "max_education", "gender",
"contributions_balance", "credit_limit", "capital_balance",
"capital_due30", "days_due", "date_approval",
"installment", "periodicity", "credit_duration", "date_limit",
"dtf_approval_date", "fx_approval_date", "default_90")
if (length(friendly_names) == ncol(data)) {
colnames(data) <- friendly_names
} else {
stop("Column name mismatch.")
}
